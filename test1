# -*- coding: utf-8 -*-
import arcpy
import os
import sys
import glob

reload(sys)
sys.setdefaultencoding('utf-8')

# 启用覆盖现有数据集选项，方便多次运行代码时覆盖已存在的同名文件
arcpy.env.overwriteOutput = True

# 设置原始.tif文件所在的根工作空间，后续通过拼接不同月份路径来获取具体月份的文件
root_workspace = r"D:\premafrost\tpat\Dataset of 0.01° Surface Air Temperature over Tibetan Plateau (1979-2018)\2014"

# 步骤1输出文件夹（存储每组平均后的文件），添加了对应月份的子文件夹
output_folder_mid0 = r"D:\premafrost\tp+mid0-calcu+dat\2014"
# 步骤2a输出文件夹（处理正值相关的文件），添加了对应月份的子文件夹
output_folder_mid0_5_t = r"D:\premafrost\tp+mid0.5-calcu+t\2014"
# 步骤2b输出文件夹（处理负值相关的文件），添加了对应月份的子文件夹
output_folder_mid0_5_f = r"D:\premafrost\tp+mid0.5-calcu+f\2014"
# 步骤3输出文件夹（累加正值、负值相关的文件）
output_folder_mid2_t = r"D:\premafrost\tp+mid2-calcu+t\2014"
output_folder_mid2_f = r"D:\premafrost\tp+mid2-calcu+f\2014"

# 创建各个输出文件夹（如果不存在），包含子文件夹结构
for folder in [output_folder_mid0, output_folder_mid0_5_t, output_folder_mid0_5_f,
               output_folder_mid2_t, output_folder_mid2_f]:
    for sub_folder in ["201401", "201402", "201403", "201404", "201405", "201406", "201407", "201408", "201409", "201410", "201411", "201412"]:
        sub_path = os.path.join(folder, sub_folder)
        if not os.path.exists(sub_path):
            os.makedirs(sub_path)

# 定义月份列表
months = [r"temp201401\temp201401", r"temp201402\temp201402", r"temp201403\temp201403",
          r"temp201404\temp201404", r"temp201405\temp201405", r"temp201406\temp201406",
          r"temp201407\temp201407", r"temp201408\temp201408", r"temp201409\temp201409",
          r"temp201410\temp201410", r"temp201411\temp201411", r"temp201412\temp201412"]

for month in months:
    # 对关键变量进行初始化或重置
    group_count = 1
    tif_files = []

    # 拼接每个月的具体工作空间路径
    arcpy.env.workspace = os.path.join(root_workspace, month)

    # 获取所有.tif文件并按照文件名数字大小排序（文件名以6或7位纯数字命名，按数值大小排序）
    all_files = os.listdir(arcpy.env.workspace)
    for file in all_files:
        if file.endswith('.tif'):
            tif_files.append(file)

    # 定义排序的key函数，先尝试将整个文件名转换为整数排序，如果失败（说明是6位数字文件名），则提取前6位转换为整数排序
    def file_sort_key(file_name):
        try:
            return int(file_name[:-4])  # 去掉后缀.tif后尝试转换为整数
        except ValueError:
            return int(file_name[:6])
    tif_files = sorted(tif_files, key=file_sort_key)


    # 步骤1：每8张为一组进行像元值累加平均，并保存结果
    group_size = 8
    file_index = 0
    while file_index < len(tif_files):
        group = tif_files[file_index:file_index + group_size]
        if len(group) > 0:  # 只要这一组有文件就进行处理，避免剩余不足8张文件时不处理的情况
            rasters_to_sum = []
            for file in group:
                rasters_to_sum.append(arcpy.Raster(file))
                print("已添加文件 {} 对应的栅格对象到待累加列表".format(file))  # 打印添加的文件对应的栅格对象情况
            sum_raster = rasters_to_sum[0]
            for raster in rasters_to_sum[1:]:
                sum_raster += raster
                print("已完成一次栅格累加操作，当前累加结果部分属性: {}".format(sum_raster))  # 打印每次累加后的部分属性

            # 计算平均栅格
            mean_raster = sum_raster / group_size
            print("已计算平均栅格，平均栅格部分属性: {}".format(mean_raster))

            # 将平均栅格的像元值转换为整数（保留整数部分）
            mean_raster = arcpy.sa.Int(mean_raster)
            print("已将平均栅格像元值转换为整数，处理后的栅格部分属性: {}".format(mean_raster))

            # 将值为 -32627的像元设置为NoData
            mean_raster = arcpy.sa.SetNull(mean_raster, mean_raster, "VALUE = -32627")
            print("已将值为 -32627的像元设置为NoData，处理后的栅格部分属性: {}".format(mean_raster))
            mean_raster = sum_raster / group_size
            print("已计算平均栅格，平均栅格部分属性: {}".format(mean_raster))  # 打印平均栅格的部分属性

            # 根据当前处理的月份生成相应格式的输出文件名及保存路径，例如201401开头对应1月，201402开头对应2月
            if "temp201401" in month:
                output_sub_folder = "201401"
                output_name = "201401{:02d}.tif".format(group_count)
            elif "temp201402" in month:
                output_sub_folder = "201402"
                output_name = "201402{:02d}.tif".format(group_count)
            elif "temp201403" in month:
                output_sub_folder = "201403"
                output_name = "201403{:02d}.tif".format(group_count)
            elif "temp201404" in month:
                output_sub_folder = "201404"
                output_name = "201404{:02d}.tif".format(group_count)
            elif "temp201405" in month:
                output_sub_folder = "201405"
                output_name = "201405{:02d}.tif".format(group_count)
            elif "temp201406" in month:
                output_sub_folder = "201406"
                output_name = "201406{:02d}.tif".format(group_count)
            elif "temp201407" in month:
                output_sub_folder = "201407"
                output_name = "201407{:02d}.tif".format(group_count)
            elif "temp201408" in month:
                output_sub_folder = "201408"
                output_name = "201408{:02d}.tif".format(group_count)
            elif "temp201409" in month:
                output_sub_folder = "201409"
                output_name = "201409{:02d}.tif".format(group_count)
            elif "temp201410" in month:
                output_sub_folder = "201410"
                output_name = "201410{:02d}.tif".format(group_count)
            elif "temp201411" in month:
                output_sub_folder = "201411"
                output_name = "201411{:02d}.tif".format(group_count)
            elif "temp201412" in month:
                output_sub_folder = "201412"
                output_name = "201412{:02d}.tif".format(group_count)
            output_path = os.path.join(output_folder_mid0, output_sub_folder, output_name)
            # 保存结果，设置像元类型为32位符号整数，单波段栅格
            print("准备保存平均后的栅格文件到 {}".format(output_path))  # 打印保存文件的路径信息
            mean_raster.save(output_path)
            group_count += 1
            file_index += group_size  # 更新文件索引，指向下一组文件的起始位置
        else:
            break  # 如果这一组没有文件了（比如剩余文件不足8张，最后一轮分组时），就结束循环
    print("步骤1在", month, "中总共生成了", group_count - 1, "组文件")

    # 步骤2a：处理像元值（小于0的输出为0，大于0的输出原值）并保存结果
    if "temp201401" in month:
        sub_folder_name = "201401"
    elif "temp201402" in month:
        sub_folder_name = "201402"
    elif "temp201403" in month:
        sub_folder_name = "201403"
    elif "temp201404" in month:
        sub_folder_name = "201404"
    elif "temp201405" in month:
        sub_folder_name = "201405"
    elif "temp201406" in month:
        sub_folder_name = "201406"
    elif "temp201407" in month:
        sub_folder_name = "201407"
    elif "temp201408" in month:
        sub_folder_name = "201408"
    elif "temp201409" in month:
        sub_folder_name = "201409"
    elif "temp201410" in month:
        sub_folder_name = "201410"
    elif "temp201411" in month:
        sub_folder_name = "201411"
    elif "temp201412" in month:
        sub_folder_name = "201412"
    print("即将使用的查找路径:", os.path.join(output_folder_mid0, sub_folder_name, "*.tif"))
    tif_files_step1 = glob.glob(os.path.join(output_folder_mid0, sub_folder_name, "*.tif"))
    if tif_files_step1:
        for file in tif_files_step1:
            input_raster = arcpy.Raster(file)
            print("读取步骤1生成的文件 {} 对应的栅格对象，其部分属性: {}".format(file, input_raster))
            # 检查数据格式和属性
            desc = arcpy.Describe(input_raster)
            print("数据类型:", desc.pixelType)
            print("波段数:", desc.bandCount)
            print("空间参考:", desc.spatialReference.name)
            if desc.pixelType != "U32":
                print("数据类型错误，期望为32位无符号整数类型，但实际为：", desc.pixelType)
                # 可以在此处添加适当的处理逻辑，例如转换数据类型或进行其他错误处理
            processed_raster = arcpy.sa.Con(input_raster > 0, input_raster, 0)
            print("已根据条件处理像元值（小于0输出为0，大于0输出原值），处理后的栅格部分属性: {}".format(processed_raster))
            new_file_name = "t+" + os.path.basename(file)
            output_path = os.path.join(output_folder_mid0_5_t, sub_folder_name, new_file_name)
            print("准备保存步骤2a处理后的栅格文件到 {}".format(output_path))
            # 检查文件路径和权限
            if not os.path.exists(os.path.dirname(output_path)):
                print("输出路径的目录不存在：", os.path.dirname(output_path))
                # 创建目录或进行其他错误处理
            if not os.access(output_path, os.W_OK):
                print("没有写入权限：", output_path)
                # 修改权限或选择其他可写路径
            # 使用arcpy.CopyRaster_management保存为32位无符号整数格式
            arcpy.CopyRaster_management(processed_raster, output_path, "", "", "", "")
    else:
        print("在步骤2a中未找到对应文件，请检查文件保存路径及文件名匹配情况！")

    # 步骤2b：处理像元值（大于0或者等于 -32627的输出为0，小于0的输出原值的绝对值）并保存结果
    if tif_files_step1:
        for file in tif_files_step1:
            input_raster = arcpy.Raster(file)
            print("读取步骤1生成的文件 {} 对应的栅格对象，其部分属性: {}".format(file, input_raster))
            processed_raster = arcpy.sa.Con((input_raster > 0) | (input_raster == -32627), 0,
                                            arcpy.sa.Abs(input_raster))
            print("已根据条件处理像元值（大于0或等于 -32627输出为0，小于0输出原值的绝对值），处理后的栅格部分属性: {}".format(processed_raster))
            new_file_name = "f+" + os.path.basename(file)
            output_path = os.path.join(output_folder_mid0_5_f, sub_folder_name, new_file_name)
            print("准备保存步骤2b处理后的栅格文件到 {}".format(output_path))

            # 使用arcpy.CopyRaster_management保存为32位无符号整数格式
            arcpy.CopyRaster_management(processed_raster, output_path, "", "", "", "")
    else:
        print("在步骤2b中未找到对应文件，请检查文件保存路径及文件名匹配情况！")

    # 步骤3：累加步骤2a中生成的所有文件对应像元的值并保存结果
    sum_raster_2a = None
    print("即将使用的查找路径:", os.path.join(output_folder_mid0_5_t, sub_folder_name, "*.tif"))
    tif_files_step2a = glob.glob(os.path.join(output_folder_mid0_5_t, sub_folder_name, "*.tif"))
    if tif_files_step2a:  # 判断是否找到了文件，如果找到了才进行累加等操作
        for file in tif_files_step2a:
            raster = arcpy.Raster(file)
            print("读取步骤2a生成的文件 {} 对应的栅格对象，其部分属性: {}".format(file, raster))  # 打印读取的栅格对象属性
            if sum_raster_2a is None:
                sum_raster_2a = raster
            else:
                sum_raster_2a += raster
                print("已完成一次累加步骤2a生成文件对应的栅格操作，当前累加结果部分属性: {}".format(sum_raster_2a))

                # 检查sum_raster_2a的有效性
                if sum_raster_2a is not None:
                    # 使用arcpy.Statistics_analysis获取累加后栅格数据的统计信息
                    stats_table = "in_memory/stats_table"
                    try:
                        arcpy.Statistics_analysis(sum_raster_2a, stats_table,
                                                  [["VALUE", "MIN"], ["VALUE", "MAX"], ["VALUE", "MEAN"]])
                        with arcpy.da.SearchCursor(stats_table, ["MIN_VALUE", "MAX_VALUE", "MEAN_VALUE"]) as cursor:
                            for row in cursor:
                                print("累加后栅格数据的最小值: {}".format(row[0]))
                                print("累加后栅格数据的最大值: {}".format(row[1]))
                                print("累加后栅格数据的均值: {}".format(row[2]))
                    except RuntimeError as e:
                        print("执行统计分析时出错：", e)
                        print("sum_raster_2a的相关属性：", sum_raster_2a)

        if sum_raster_2a is not None:
            if "temp201401" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201401.tif")
            elif "temp201402" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201402.tif")
            elif "temp201403" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201403.tif")
            elif "temp201404" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201404.tif")
            elif "temp201405" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201405.tif")
            elif "temp201406" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201406.tif")
            elif "temp201407" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201407.tif")
            elif "temp201408" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201408.tif")
            elif "temp201409" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201409.tif")
            elif "temp201410" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201410.tif")
            elif "temp201411" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201411.tif")
            elif "temp201412" in month:
                output_path = os.path.join(output_folder_mid2_t, "tsum201412.tif")
            print("准备保存累加步骤2a生成文件后的栅格文件到 {}".format(output_path))  # 打印保存文件的路径信息
            sum_raster_2a.save(output_path,"Int32")
    else:
        print("在步骤3（累加2a文件）中未找到对应文件，请检查文件保存路径及文件名匹配情况！")

    # 步骤3：累加步骤2b中生成的所有文件对应像元的值并保存结果
    sum_raster_2b = None
    print("即将使用的查找路径:", os.path.join(output_folder_mid0_5_f, sub_folder_name, "*.tif"))
    tif_files_step2b = glob.glob(os.path.join(output_folder_mid0_5_f, sub_folder_name, "*.tif"))
    if tif_files_step2b:  # 判断是否找到了文件，如果找到了才进行累加等操作
        for file in tif_files_step2b:
            raster = arcpy.Raster(file)
            print("读取步骤2b生成的文件 {} 对应的栅格对象，其部分属性: {}".format(file, raster))  # 打印读取的栅格对象属性
            if sum_raster_2b is None:
                sum_raster_2b = raster
            else:
                sum_raster_2b += raster
                print("已完成一次累加步骤2b生成文件对应的栅格操作，当前累加结果部分属性: {}".format(sum_raster_2b))
                # 使用arcpy.Statistics_analysis获取累加后栅格数据的统计信息（最小值、最大值、均值等）
                stats_table = "in_memory/stats_table"
                arcpy.Statistics_analysis(sum_raster_2b, stats_table, [["VALUE", "MIN"], ["VALUE", "MAX"], ["VALUE", "MEAN"]])
                with arcpy.da.SearchCursor(stats_table, ["MIN_VALUE", "MAX_VALUE", "MEAN_VALUE"]) as cursor:
                    for row in cursor:
                        print("累加后栅格数据的最小值: {}".format(row[0]))
                        print("累加后栅格 data的最大值: {}".format(row[1]))
                        print("累加后栅格数据的均值: {}".format(row[2]))
        if sum_raster_2b is not None:
            if "temp201401" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201401.tif")
            elif "temp201402" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201402.tif")
            elif "temp201403" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201403.tif")
            elif "temp201404" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201404.tif")
            elif "temp201405" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201405.tif")
            elif "temp201406" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201406.tif")
            elif "temp201407" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201407.tif")
            elif "temp201408" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201408.tif")
            elif "temp201409" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201409.tif")
            elif "temp201410" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201410.tif")
            elif "temp201411" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201411.tif")
            elif "temp201412" in month:
                output_path = os.path.join(output_folder_mid2_f, "fsum201412.tif")
            print("准备保存累加步骤2b生成文件后的栅格数据文件到 {}".format(output_path))  # 打印保存文件的路径信息
            sum_raster_2b.save(output_path,"Int32")
    else:
        print("在步骤3（累加2a文件）中未找到对应文件，请检查文件保存路径及文件名匹配情况！")
